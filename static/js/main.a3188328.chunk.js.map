{"version":3,"sources":["logo.svg","TabPanel.js","App.js","reportWebVitals.js","index.js"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","App","useStyles","makeStyles","theme","paper","display","React","useState","tabVal","setTab","classes","className","AppBar","position","Tabs","onChange","event","newValue","indicatorColor","textColor","variant","aria-label","Tab","label","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,I,6ECiCAA,MA1Bf,SAAkBC,GAAQ,IACdC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADd,YACwBJ,EADxB,8BAGrB,OACE,6CACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,8BAAyBJ,GAC3BK,kBAAA,yBAAmCL,IAC/BC,GALN,aAOGF,IAAUC,GACT,cAACM,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,cAACC,EAAA,EAAD,UAAaV,UC+BVW,MA7Cf,WAEE,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,QAAS,YAJA,EAUYC,IAAMC,SAAS,GAV3B,mBAUNC,EAVM,KAUEC,EAVF,KAWPC,EAAUT,IAMhB,OACE,sBAAKU,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CACExB,MAAOkB,EACPO,SAXQ,SAACC,EAAOC,GACxBR,EAAOQ,IAWCC,eAAe,UACfC,UAAU,UACVC,QAAQ,YACRC,aAAW,OANb,UAOI,cAACC,EAAA,EAAD,CAAKC,MAAM,OAAOjC,MAAM,MACxB,cAACgC,EAAA,EAAD,CAAKC,MAAM,SAASjC,MAAM,MAC1B,cAACgC,EAAA,EAAD,CAAKC,MAAM,WAAWjC,MAAM,MAC5B,cAACgC,EAAA,EAAD,CAAKC,MAAM,aAAajC,MAAM,aAItC,cAAC,EAAD,CAAUA,MAAOkB,EAAQjB,MAAO,EAAhC,SACE,cAACiC,EAAA,EAAD,CAAOb,UAAWD,EAAQN,MAA1B,uCC9BOqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a3188328.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n\r\nexport default TabPanel;","import logo from './logo.svg';\nimport './App.css';\nimport { AppBar, makeStyles, Paper, Tab, Tabs } from \"@material-ui/core\"\nimport TabPanel from './TabPanel';\nimport React from 'react';\n\nfunction App() {\n\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      display: 'flex',\n    }\n  }));\n\n\n\n  const [tabVal, setTab] = React.useState(0)\n  const classes = useStyles()\n  const tabChange = (event, newValue) => {\n    setTab(newValue);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBar position=\"static\">\n          <Tabs\n            value={tabVal}\n            onChange={tabChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n            aria-label=\"TODO\">\n              <Tab label=\"Home\" value=\"0\"/>\n              <Tab label=\"Resume\" value=\"1\"/>\n              <Tab label=\"About Me\" value=\"2\"/>\n              <Tab label=\"Contact me\" value=\"3\"/>\n          </Tabs>\n        </AppBar>\n      </header>\n      <TabPanel value={tabVal} index={0}>\n        <Paper className={classes.paper}>\n          This is just a test\n        </Paper>\n      </TabPanel>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}